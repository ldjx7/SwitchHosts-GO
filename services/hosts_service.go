package services

import (
	"SwitchHosts-GO/models"
	"bufio"
	"encoding/json"
	"errors"
	"io"
	"net/http"
	"os"
	"path/filepath"
	"runtime"
	"strings"
	"time"

	"github.com/google/uuid"
)

// HostsService 提供hosts文件管理服务
type HostsService struct {
	DataDir     string
	HostsGroups map[string]*models.HostGroup
	Config      models.SystemConfig
}

// NewHostsService 创建一个新的HostsService实例
func NewHostsService(dataDir string) *HostsService {
	// 确保数据目录存在
	if err := os.MkdirAll(dataDir, 0755); err != nil {
		return nil
	}

	service := &HostsService{
		DataDir:     dataDir,
		HostsGroups: make(map[string]*models.HostGroup),
		Config: models.SystemConfig{
			Theme:        "light",
			AutoBackup:   true,
			BackupFolder: "",
			UpdateFreq:   60,       // 默认60分钟
			HostsMode:    "append", // 默认追加模式
		},
	}

	// 读取配置文件
	configFile := filepath.Join(dataDir, "config.json")
	if _, err := os.Stat(configFile); err == nil {
		data, err := os.ReadFile(configFile)
		if err == nil {
			var config models.SystemConfig
			if err := json.Unmarshal(data, &config); err == nil {
				service.Config = config
			}
		}
	}

	// 读取hosts组
	groupsDir := filepath.Join(dataDir, "groups")
	if err := os.MkdirAll(groupsDir, 0755); err == nil {
		files, err := os.ReadDir(groupsDir)
		if err == nil {
			for _, file := range files {
				if file.IsDir() || !strings.HasSuffix(file.Name(), ".json") {
					continue
				}

				data, err := os.ReadFile(filepath.Join(groupsDir, file.Name()))
				if err != nil {
					continue
				}

				var group models.HostGroup
				if err := json.Unmarshal(data, &group); err != nil {
					continue
				}

				service.HostsGroups[group.ID] = &group
			}
		}
	}

	return service
}

// GetSystemHostsPath 获取系统hosts文件路径
func (s *HostsService) GetSystemHostsPath() string {
	switch runtime.GOOS {
	case "windows":
		return filepath.Join(os.Getenv("SystemRoot"), "System32", "drivers", "etc", "hosts")
	default: // macOS, Linux
		return "/etc/hosts"
	}
}

// GetSystemHosts 获取系统hosts文件内容
func (s *HostsService) GetSystemHosts() (*models.HostsFile, error) {
	path := s.GetSystemHostsPath()
	content, err := os.ReadFile(path)
	if err != nil {
		return nil, err
	}

	return &models.HostsFile{
		Path:    path,
		Content: string(content),
	}, nil
}

// WriteSystemHosts 写入系统hosts文件
func (s *HostsService) WriteSystemHosts(content string) error {
	path := s.GetSystemHostsPath()
	return os.WriteFile(path, []byte(content), 0644)
}

// BackupOriginalHosts 备份原始hosts文件（如果备份不存在）
func (s *HostsService) BackupOriginalHosts() (string, error) {
	// 检查是否已经有原始备份
	backupPath := filepath.Join(s.DataDir, "original_hosts")
	if _, err := os.Stat(backupPath); err == nil {
		// 原始备份已存在，直接返回
		return backupPath, nil
	}

	// 获取当前hosts文件
	hostsFile, err := s.GetSystemHosts()
	if err != nil {
		return "", err
	}

	// 创建数据目录
	if err := os.MkdirAll(s.DataDir, 0755); err != nil {
		return "", err
	}

	// 保存原始hosts文件
	if err := os.WriteFile(backupPath, []byte(hostsFile.Content), 0644); err != nil {
		return "", err
	}

	return backupPath, nil
}

// RestoreOriginalHosts 恢复原始hosts文件
func (s *HostsService) RestoreOriginalHosts() error {
	// 检查原始备份是否存在
	backupPath := filepath.Join(s.DataDir, "original_hosts")
	if _, err := os.Stat(backupPath); os.IsNotExist(err) {
		return errors.New("原始hosts备份不存在")
	}

	// 读取原始备份
	content, err := os.ReadFile(backupPath)
	if err != nil {
		return err
	}

	// 恢复到系统hosts文件
	return s.WriteSystemHosts(string(content))
}

// UpdateSystemHosts 根据当前激活的hosts组更新系统hosts文件
func (s *HostsService) UpdateSystemHosts() error {
	// 先备份原始hosts文件（如果还没有备份）
	originalHostsPath, err := s.BackupOriginalHosts()
	if err != nil {
		return err
	}

	var contentBuilder strings.Builder

	// 添加头部注释
	contentBuilder.WriteString("# Generated by SwitchHosts-GO\n")
	contentBuilder.WriteString("# " + time.Now().Format(time.RFC1123) + "\n\n")

	// 检查是否有激活的hosts组
	activeGroups := make([]*models.HostGroup, 0)
	for _, group := range s.HostsGroups {
		if group.IsActive {
			activeGroups = append(activeGroups, group)
		}
	}

	// 如果没有激活的hosts组，则恢复原始hosts
	if len(activeGroups) == 0 {
		return s.RestoreOriginalHosts()
	}

	// 追加模式：先添加系统原始hosts文件内容
	if s.Config.HostsMode == "append" {
		// 读取原始hosts备份
		originalContent, err := os.ReadFile(originalHostsPath)
		if err == nil {
			contentBuilder.WriteString("# 系统原始hosts内容\n")
			contentBuilder.WriteString(string(originalContent))
			contentBuilder.WriteString("\n\n")
		}
	}

	// 添加激活的hosts组内容
	for _, group := range activeGroups {
		contentBuilder.WriteString("# BEGIN: " + group.Title + "\n")
		contentBuilder.WriteString(group.Content + "\n")
		contentBuilder.WriteString("# END: " + group.Title + "\n\n")
	}

	return s.WriteSystemHosts(contentBuilder.String())
}

// SaveHostGroup 保存hosts组到文件
func (s *HostsService) SaveHostGroup(group *models.HostGroup) error {
	groupsDir := filepath.Join(s.DataDir, "groups")
	if err := os.MkdirAll(groupsDir, 0755); err != nil {
		return err
	}

	data, err := json.MarshalIndent(group, "", "  ")
	if err != nil {
		return err
	}

	return os.WriteFile(filepath.Join(groupsDir, group.ID+".json"), data, 0644)
}

// DeleteHostGroupFile 删除hosts组文件
func (s *HostsService) DeleteHostGroupFile(id string) error {
	filePath := filepath.Join(s.DataDir, "groups", id+".json")
	if _, err := os.Stat(filePath); err != nil {
		return nil // 文件不存在视为删除成功
	}
	return os.Remove(filePath)
}

// CreateHostGroup 创建一个新的hosts组
func (s *HostsService) CreateHostGroup(title, content string, isRemote bool, remoteURL string) (*models.HostGroup, error) {
	id := uuid.New().String()
	now := time.Now().Format(time.RFC3339)

	group := &models.HostGroup{
		ID:          id,
		Title:       title,
		Content:     content,
		IsActive:    false,
		IsRemote:    isRemote,
		RemoteURL:   remoteURL,
		LastUpdated: now,
		CreatedAt:   now,
	}

	s.HostsGroups[id] = group

	// TODO 如果是远程hosts，立即更新内容
	// if isRemote && remoteURL != "" {
	// 	if err := s.UpdateRemoteHostGroup(id); err != nil {
	// 		return group, err
	// 	}
	// }

	// 保存单个hosts组
	if err := s.SaveHostGroup(group); err != nil {
		return group, err
	}

	return group, nil
}

// UpdateHostGroup 更新hosts组
func (s *HostsService) UpdateHostGroup(id, title, content string, isActive bool) error {
	group, exists := s.HostsGroups[id]
	if !exists {
		return errors.New("hosts组不存在")
	}

	wasActive := group.IsActive

	group.Title = title
	group.Content = content
	group.IsActive = isActive
	group.LastUpdated = time.Now().Format(time.RFC3339)

	// 保存更新后的hosts组
	if err := s.SaveHostGroup(group); err != nil {
		return err
	}

	// 如果状态改变，更新系统hosts文件
	if wasActive != isActive {
		if err := s.UpdateSystemHosts(); err != nil {
			return err
		}
	}

	return nil
}

// DeleteHostGroup 删除hosts组
func (s *HostsService) DeleteHostGroup(id string) error {
	group, exists := s.HostsGroups[id]
	if !exists {
		return errors.New("hosts组不存在")
	}

	wasActive := group.IsActive

	delete(s.HostsGroups, id)

	// 删除hosts组文件
	if err := s.DeleteHostGroupFile(id); err != nil {
		return err
	}

	// 如果删除的是活动hosts组，更新系统hosts文件
	if wasActive {
		if err := s.UpdateSystemHosts(); err != nil {
			return err
		}
	}

	return nil
}

// ToggleHostGroup 切换hosts组的激活状态
func (s *HostsService) ToggleHostGroup(id string) error {
	group, exists := s.HostsGroups[id]
	if !exists {
		return errors.New("hosts组不存在")
	}

	group.IsActive = !group.IsActive

	// 保存更新
	if err := s.SaveHostGroup(group); err != nil {
		return err
	}

	// 更新系统hosts文件
	return s.UpdateSystemHosts()
}

// UpdateRemoteHostGroup 更新远程hosts组内容
func (s *HostsService) UpdateRemoteHostGroup(id string) error {
	group, exists := s.HostsGroups[id]
	if !exists {
		return errors.New("hosts组不存在")
	}

	if !group.IsRemote || group.RemoteURL == "" {
		return errors.New("非远程hosts组或URL为空")
	}

	resp, err := http.Get(group.RemoteURL)
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return errors.New("HTTP请求失败: " + resp.Status)
	}

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return err
	}

	group.Content = string(body)
	group.LastUpdated = time.Now().Format(time.RFC3339)

	// 保存更新的hosts组
	if err := s.SaveHostGroup(group); err != nil {
		return err
	}

	// 如果该hosts组处于激活状态，更新系统hosts文件
	if group.IsActive {
		if err := s.UpdateSystemHosts(); err != nil {
			return err
		}
	}

	return nil
}

// LoadData 从文件加载hosts组和配置数据
func (s *HostsService) LoadData() error {
	// 加载配置
	configFile := filepath.Join(s.DataDir, "config.json")
	data, err := os.ReadFile(configFile)
	if err != nil {
		// 配置文件不存在时使用默认配置
		if os.IsNotExist(err) {
			return nil
		}
		return err
	}

	var config models.SystemConfig
	if err := json.Unmarshal(data, &config); err != nil {
		return err
	}
	s.Config = config

	// 加载hosts组
	groupsDir := filepath.Join(s.DataDir, "groups")
	if err := os.MkdirAll(groupsDir, 0755); err != nil {
		return err
	}

	files, err := os.ReadDir(groupsDir)
	if err != nil {
		return err
	}

	for _, file := range files {
		if file.IsDir() || !strings.HasSuffix(file.Name(), ".json") {
			continue
		}

		data, err := os.ReadFile(filepath.Join(groupsDir, file.Name()))
		if err != nil {
			continue
		}

		var group models.HostGroup
		if err := json.Unmarshal(data, &group); err != nil {
			continue
		}

		s.HostsGroups[group.ID] = &group
	}

	return nil
}

// SaveData 保存所有数据
func (s *HostsService) SaveData() error {
	// 保存配置
	if err := s.SaveConfig(); err != nil {
		return err
	}

	// 保存每个hosts组
	for _, group := range s.HostsGroups {
		if err := s.SaveHostGroup(group); err != nil {
			return err
		}
	}

	return nil
}

// GetAllHostGroups 获取所有hosts组
func (s *HostsService) GetAllHostGroups() []*models.HostGroup {
	groups := make([]*models.HostGroup, 0, len(s.HostsGroups))
	for _, group := range s.HostsGroups {
		groups = append(groups, group)
	}
	return groups
}

// BackupSystemHosts 备份系统hosts文件
func (s *HostsService) BackupSystemHosts() error {
	hostsFile, err := s.GetSystemHosts()
	if err != nil {
		return err
	}

	backupDir := s.Config.BackupFolder
	if backupDir == "" {
		backupDir = filepath.Join(s.DataDir, "backups")
	}

	if err := os.MkdirAll(backupDir, 0755); err != nil {
		return err
	}

	timestamp := time.Now().Format("20060102_150405")
	backupPath := filepath.Join(backupDir, "hosts_"+timestamp)

	return os.WriteFile(backupPath, []byte(hostsFile.Content), 0644)
}

// ParseSystemHosts 解析系统hosts文件为单独的hosts条目
func (s *HostsService) ParseSystemHosts() ([]string, error) {
	hostsFile, err := s.GetSystemHosts()
	if err != nil {
		return nil, err
	}

	var entries []string
	scanner := bufio.NewScanner(strings.NewReader(hostsFile.Content))

	for scanner.Scan() {
		line := strings.TrimSpace(scanner.Text())
		if line != "" && !strings.HasPrefix(line, "#") {
			entries = append(entries, line)
		}
	}

	return entries, scanner.Err()
}

// SaveConfig 保存配置到文件
func (s *HostsService) SaveConfig() error {
	data, err := json.MarshalIndent(s.Config, "", "  ")
	if err != nil {
		return err
	}

	return os.WriteFile(filepath.Join(s.DataDir, "config.json"), data, 0644)
}
